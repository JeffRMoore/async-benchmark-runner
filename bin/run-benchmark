#!/usr/bin/env node --expose-gc
'use strict';

const fs = require('fs');
const path = require('path');
const mkdirp = require('mkdirp');
const parseArgs = require('minimist');
const startBenchmarking = require('../src/runner').startBenchmarking;
const reportResult = require('../src/report/report').reportResult;

const TimeDimension = require('../src/dimension/time').TimeDimension;
const MemoryDimension = require('../src/dimension/memory').MemoryDimension;
const DebugDimension = require('../src/dimension/debug').DebugDimension;
  
const argv = parseArgs(process.argv.slice(2));

const suiteFile = path.resolve(
  process.cwd(),
  argv.suite ? argv.suite : 'benchmark/suite'
);
const resultDir = path.resolve(
  process.cwd(),
  argv['result-dir'] ? argv['result-dir'] : 'benchmark-results'
);

const benchmarkSuite = require(suiteFile);

let isDebugging = false;

if (argv['debug-gc'] !== undefined) {
  // --trace_gc
  isDebugging = true;
}

if (argv['debug-opt'] !== undefined) {
  // --trace_opt
  isDebugging = true;
}

if (argv['debug-deopt'] !== undefined) {
  //  --trace_deopt
  isDebugging = true;
}

const dimensions = [];

if (isDebugging) {
  dimensions.push(DebugDimension);
}

if (global.gc) {
  dimensions.push(MemoryDimension);
}

dimensions.push(TimeDimension);

console.log(
  'Running',
  benchmarkSuite.name,
  'from',
  path.relative(process.cwd(), suiteFile)
);
startBenchmarking(
  benchmarkSuite.name, 
  benchmarkSuite.benchmarks,
  dimensions
).then( results => {
  reportResult(results, console.log);
  mkdirp(resultDir, (err) => {
    if (err) {
      console.log(err);
      process.exit(1);
    }
    const filename = path.join(resultDir, results.startTime + '-benchmark.json');
    console.log('Writing results to', path.relative(process.cwd(), filename));
    fs.writeFile(filename, JSON.stringify(results), (err) => {
      if (err) {
        console.log(err);
        process.exit(1);
      }
    });
  });
}).catch( err => {
  console.log(err);
  process.exit(1);
});